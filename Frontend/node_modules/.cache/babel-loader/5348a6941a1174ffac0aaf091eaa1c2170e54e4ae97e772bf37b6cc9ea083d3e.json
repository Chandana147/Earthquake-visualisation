{"ast":null,"code":"var _jsxFileName = \"/Users/chandana/Desktop/civic/Frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [geoJson, setgeoJson] = useState([]);\n  const receiving = () => {\n    const onSubmitClick = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/geoJson`);\n        if (response) {\n          setgeoJson(response);\n          console.log(response);\n        } else {\n          res.status(200).json({\n            message: \"cannot fetch\"\n          });\n        }\n      } catch (err) {\n        console.log(err);\n        res.status(500).json({\n          message: 'An error occurred.'\n        });\n      }\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: response.map(i => {\n      /*#__PURE__*/_jsxDEV(\"p\", {\n        children: i.Datetime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false);\n}\n_s(App, \"lGAlh3RdLieEqqDkNADj+/vEtcQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","geoJson","setgeoJson","receiving","onSubmitClick","response","axios","get","console","log","res","status","json","message","err","children","map","i","Datetime","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chandana/Desktop/civic/Frontend/src/App.js"],"sourcesContent":["import './App.css';\nimport { useState } from 'react';\nfunction App() {\n  const [geoJson, setgeoJson] = useState([])\n  const receiving = () => {\n    const onSubmitClick = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/geoJson`)\n        if (response) {\n          setgeoJson(response)\n          console.log(response)\n        }\n        else {\n          res.status(200).json({ message: \"cannot fetch\" });\n        }\n      }\n      catch (err) {\n        console.log(err)\n        res.status(500).json({ message: 'An error occurred.' });\n      }\n    }\n  }\n  return (\n    <>\n      {response.map((i)=>{\n        <p>{i.Datetime}</p>\n      })}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMS,SAAS,GAAGA,CAAA,KAAM;IACtB,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAE,+BAA8B,CAAC;QACjE,IAAIF,QAAQ,EAAE;UACZH,UAAU,CAACG,QAAQ,CAAC;UACpBG,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;QACvB,CAAC,MACI;UACHK,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;YAAEC,OAAO,EAAE;UAAe,CAAC,CAAC;QACnD;MACF,CAAC,CACD,OAAOC,GAAG,EAAE;QACVN,OAAO,CAACC,GAAG,CAACK,GAAG,CAAC;QAChBJ,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,OAAO,EAAE;QAAqB,CAAC,CAAC;MACzD;IACF,CAAC;EACH,CAAC;EACD,oBACEjB,OAAA,CAAAE,SAAA;IAAAiB,QAAA,EACGV,QAAQ,CAACW,GAAG,CAAEC,CAAC,IAAG;MACjB,aAAArB,OAAA;QAAAmB,QAAA,EAAIE,CAAC,CAACC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IACrB,CAAC;EAAC,gBACF,CAAC;AAEP;AAACtB,EAAA,CA3BQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AA6BZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}