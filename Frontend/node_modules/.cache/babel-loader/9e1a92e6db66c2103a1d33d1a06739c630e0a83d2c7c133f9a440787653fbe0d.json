{"ast":null,"code":"var _jsxFileName = \"/Users/chandana/Desktop/civic/Frontend/src/Civic.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { MapContainer, Marker, Popup, TileLayer, useMap } from 'react-leaflet';\nimport L, { Icon } from 'leaflet';\nimport './App.css';\n// Custom icon configuration for the earthquake markers\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst customIcon = new Icon({\n  iconUrl: '/assets/marker-icon.svg',\n  iconSize: [40, 40],\n  shadowSize: [41, 41]\n});\n// Function to format Date\nconst formatDate = dateTime => {\n  var date = new Date(dateTime);\n  var options = {\n    year: 'numeric',\n    month: 'long',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  };\n  return date.toLocaleDateString('en-US', options);\n};\n// Marker component that renders the earthquake markers and fit the map to show all markers\nconst Markers = _ref => {\n  _s();\n  let {\n    earthquakes\n  } = _ref;\n  const map = useMap();\n  useEffect(() => {\n    const group = L.featureGroup();\n    earthquakes.forEach(earthquake => {\n      if (earthquake.geometry) {\n        L.marker([earthquake.geometry.Latitude, Longtitude]).addTo(group);\n      }\n    });\n    // getBounds calculates the bounding box of the featureGroup (group of markers)\n    const bounds = group.getBounds();\n    // if the bounds are valid, adjust the viewport to fit the bounds\n    if (bounds.isValid()) {\n      map.fitBounds(bounds);\n    }\n  }, [earthquakes, map]);\n  // Mapping each earthquake to a Marker\n  return earthquakes.map(earthquake => {\n    // Formatting the earthquake date\n    const formattedDate = formatDate(earthquake.properties.DateTime);\n    return /*#__PURE__*/_jsxDEV(Marker, {\n      icon: customIcon // Custom icon for the marker\n      ,\n\n      position: earthquake.geometry.coordinates,\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Region:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this), \" \", earthquake.properties.region, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Magnitude:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), \" \", earthquake.properties.magnitude, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Date & Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this), \" \", formattedDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, earthquake.properties._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this);\n  });\n};\n_s(Markers, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = Markers;\nconst Earthquakes = _ref2 => {\n  let {\n    earthquakesData\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    className: \"mapContainer\",\n    center: [0, 0],\n    zoom: 3,\n    scrollWheelZoom: true,\n    style: {\n      height: \"calc(100vh - 150px)\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 OpenStreetMap contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Markers, {\n      earthquakes: earthquakesData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_c2 = Earthquakes;\nexport default Earthquakes;\nvar _c, _c2;\n$RefreshReg$(_c, \"Markers\");\n$RefreshReg$(_c2, \"Earthquakes\");","map":{"version":3,"names":["useEffect","MapContainer","Marker","Popup","TileLayer","useMap","L","Icon","jsxDEV","_jsxDEV","customIcon","iconUrl","iconSize","shadowSize","formatDate","dateTime","date","Date","options","year","month","day","hour","minute","hour12","toLocaleDateString","Markers","_ref","_s","earthquakes","map","group","featureGroup","forEach","earthquake","geometry","marker","Latitude","Longtitude","addTo","bounds","getBounds","isValid","fitBounds","formattedDate","properties","DateTime","icon","position","coordinates","children","fileName","_jsxFileName","lineNumber","columnNumber","region","magnitude","_id","_c","Earthquakes","_ref2","earthquakesData","className","center","zoom","scrollWheelZoom","style","height","url","attribution","_c2","$RefreshReg$"],"sources":["/Users/chandana/Desktop/civic/Frontend/src/Civic.jsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { MapContainer, Marker, Popup, TileLayer, useMap } from 'react-leaflet';\nimport L, { Icon } from 'leaflet';\nimport './App.css'\n// Custom icon configuration for the earthquake markers\nconst customIcon = new Icon({\n    iconUrl: '/assets/marker-icon.svg',\n    iconSize: [40, 40],\n    shadowSize: [41, 41]\n});\n// Function to format Date\nconst formatDate = (dateTime) => {\n    var date = new Date(dateTime);\n    var options = {\n        year: 'numeric',\n        month: 'long',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true\n    };\n    return date.toLocaleDateString('en-US', options);\n}\n// Marker component that renders the earthquake markers and fit the map to show all markers\nconst Markers = ({ earthquakes }) => {\n    const map = useMap();\n    useEffect(() => {\n        const group = L.featureGroup();\n        earthquakes.forEach(earthquake => {\n            if(earthquake.geometry){\n                L.marker([earthquake.geometry.Latitude, Longtitude]).addTo(group);\n            }\n        });\n        // getBounds calculates the bounding box of the featureGroup (group of markers)\n        const bounds = group.getBounds();\n        // if the bounds are valid, adjust the viewport to fit the bounds\n        if (bounds.isValid()) {\n            map.fitBounds(bounds);\n        }\n    }, [earthquakes, map]);\n    // Mapping each earthquake to a Marker\n    return earthquakes.map((earthquake) => {\n        // Formatting the earthquake date\n        const formattedDate = formatDate(earthquake.properties.DateTime);\n        return (\n            <Marker\n                icon={customIcon} // Custom icon for the marker\n                key={earthquake.properties._id}\n                position={earthquake.geometry.coordinates}\n            >\n                <Popup>\n                    <div>\n                        <strong>Region:</strong> {earthquake.properties.region}\n                        <br />\n                        <strong>Magnitude:</strong> {earthquake.properties.magnitude}\n                        <br />\n                        <strong>Date & Time:</strong> {formattedDate}\n                    </div>\n                </Popup>\n            </Marker>\n        );\n    });\n};\nconst Earthquakes = ({ earthquakesData }) => {\n    return (\n        <MapContainer\n            className='mapContainer'\n            center={[0, 0]}\n            zoom={3}\n            scrollWheelZoom={true}\n            style={{ height: \"calc(100vh - 150px)\" }}\n        >\n            <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution=\"&copy; OpenStreetMap contributors\"\n            />\n            <Markers earthquakes={earthquakesData} />\n        </MapContainer>\n    );\n}\nexport default Earthquakes;"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,YAAY,EAAEC,MAAM,EAAEC,KAAK,EAAEC,SAAS,EAAEC,MAAM,QAAQ,eAAe;AAC9E,OAAOC,CAAC,IAAIC,IAAI,QAAQ,SAAS;AACjC,OAAO,WAAW;AAClB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAG,IAAIH,IAAI,CAAC;EACxBI,OAAO,EAAE,yBAAyB;EAClCC,QAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;EAClBC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE;AACvB,CAAC,CAAC;AACF;AACA,MAAMC,UAAU,GAAIC,QAAQ,IAAK;EAC7B,IAAIC,IAAI,GAAG,IAAIC,IAAI,CAACF,QAAQ,CAAC;EAC7B,IAAIG,OAAO,GAAG;IACVC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,MAAM;IACbC,GAAG,EAAE,SAAS;IACdC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAE;EACZ,CAAC;EACD,OAAOR,IAAI,CAACS,kBAAkB,CAAC,OAAO,EAAEP,OAAO,CAAC;AACpD,CAAC;AACD;AACA,MAAMQ,OAAO,GAAGC,IAAA,IAAqB;EAAAC,EAAA;EAAA,IAApB;IAAEC;EAAY,CAAC,GAAAF,IAAA;EAC5B,MAAMG,GAAG,GAAGzB,MAAM,CAAC,CAAC;EACpBL,SAAS,CAAC,MAAM;IACZ,MAAM+B,KAAK,GAAGzB,CAAC,CAAC0B,YAAY,CAAC,CAAC;IAC9BH,WAAW,CAACI,OAAO,CAACC,UAAU,IAAI;MAC9B,IAAGA,UAAU,CAACC,QAAQ,EAAC;QACnB7B,CAAC,CAAC8B,MAAM,CAAC,CAACF,UAAU,CAACC,QAAQ,CAACE,QAAQ,EAAEC,UAAU,CAAC,CAAC,CAACC,KAAK,CAACR,KAAK,CAAC;MACrE;IACJ,CAAC,CAAC;IACF;IACA,MAAMS,MAAM,GAAGT,KAAK,CAACU,SAAS,CAAC,CAAC;IAChC;IACA,IAAID,MAAM,CAACE,OAAO,CAAC,CAAC,EAAE;MAClBZ,GAAG,CAACa,SAAS,CAACH,MAAM,CAAC;IACzB;EACJ,CAAC,EAAE,CAACX,WAAW,EAAEC,GAAG,CAAC,CAAC;EACtB;EACA,OAAOD,WAAW,CAACC,GAAG,CAAEI,UAAU,IAAK;IACnC;IACA,MAAMU,aAAa,GAAG9B,UAAU,CAACoB,UAAU,CAACW,UAAU,CAACC,QAAQ,CAAC;IAChE,oBACIrC,OAAA,CAACP,MAAM;MACH6C,IAAI,EAAErC,UAAW,CAAC;MAAA;;MAElBsC,QAAQ,EAAEd,UAAU,CAACC,QAAQ,CAACc,WAAY;MAAAC,QAAA,eAE1CzC,OAAA,CAACN,KAAK;QAAA+C,QAAA,eACFzC,OAAA;UAAAyC,QAAA,gBACIzC,OAAA;YAAAyC,QAAA,EAAQ;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACpB,UAAU,CAACW,UAAU,CAACU,MAAM,eACtD9C,OAAA;YAAA0C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN7C,OAAA;YAAAyC,QAAA,EAAQ;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACpB,UAAU,CAACW,UAAU,CAACW,SAAS,eAC5D/C,OAAA;YAAA0C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACN7C,OAAA;YAAAyC,QAAA,EAAQ;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACV,aAAa;QAAA;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC,GAXHpB,UAAU,CAACW,UAAU,CAACY,GAAG;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAY1B,CAAC;EAEjB,CAAC,CAAC;AACN,CAAC;AAAC1B,EAAA,CAtCIF,OAAO;EAAA,QACGrB,MAAM;AAAA;AAAAqD,EAAA,GADhBhC,OAAO;AAuCb,MAAMiC,WAAW,GAAGC,KAAA,IAAyB;EAAA,IAAxB;IAAEC;EAAgB,CAAC,GAAAD,KAAA;EACpC,oBACInD,OAAA,CAACR,YAAY;IACT6D,SAAS,EAAC,cAAc;IACxBC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAE;IACfC,IAAI,EAAE,CAAE;IACRC,eAAe,EAAE,IAAK;IACtBC,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAsB,CAAE;IAAAjB,QAAA,gBAEzCzC,OAAA,CAACL,SAAS;MACNgE,GAAG,EAAC,oDAAoD;MACxDC,WAAW,EAAC;IAAmC;MAAAlB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,eACF7C,OAAA,CAACiB,OAAO;MAACG,WAAW,EAAEgC;IAAgB;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEvB,CAAC;AAAAgB,GAAA,GAhBKX,WAAW;AAiBjB,eAAeA,WAAW;AAAC,IAAAD,EAAA,EAAAY,GAAA;AAAAC,YAAA,CAAAb,EAAA;AAAAa,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}