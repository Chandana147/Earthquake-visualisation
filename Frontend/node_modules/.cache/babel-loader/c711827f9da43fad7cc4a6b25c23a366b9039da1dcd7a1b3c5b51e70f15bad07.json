{"ast":null,"code":"var _jsxFileName = \"/Users/chandana/Desktop/assignment/Earthquake-visualisation/Frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport Civic from \"./Civic.jsx\";\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [geoJson, setgeoJson] = useState([]);\n  useEffect(() => {\n    console.log(geoJson);\n  }, [geoJson]);\n  useEffect(() => {\n    receiving();\n  }, []);\n  const receiving = async () => {\n    try {\n      const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/geoJson`);\n      console.log(response);\n      if (response.data.code === 200) {\n        setgeoJson(response.data.message);\n      } else {\n        console.log('not data');\n        // alert('not working')\n      }\n    } catch (err) {\n      console.log(err);\n      // alert('wrong')\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Civic, {\n      earthquakesData: geoJson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(App, \"+/FsSem9KyD8UCjCvARDF/9HCOs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","axios","Civic","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","geoJson","setgeoJson","console","log","receiving","response","get","process","env","REACT_APP_BACKEND_URL","data","code","message","err","children","earthquakesData","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chandana/Desktop/assignment/Earthquake-visualisation/Frontend/src/App.js"],"sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport Civic from \"./Civic.jsx\"\nimport 'leaflet/dist/leaflet.css';\n\nconst App=()=> {\n  const [geoJson, setgeoJson] = useState([])\n\n  useEffect(()=> {\n    console.log(geoJson);\n  },[geoJson]);\n\n  useEffect(() => {\n    receiving();\n  },[]);\n\n    const receiving = async () => {\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/geoJson`)\n        console.log(response);\n        if (response.data.code === 200) {\n          setgeoJson(response.data.message)\n        }\n        else {\n          console.log('not data');\n          // alert('not working')\n        }\n      }\n      catch (err) {\n        console.log(err)\n        // alert('wrong')\n      }\n    }\n  return (\n    <>\n      <Civic earthquakesData={geoJson} />\n    </>\n  );\n}\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,MAAMC,GAAG,GAACA,CAAA,KAAK;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAK;IACbY,OAAO,CAACC,GAAG,CAACH,OAAO,CAAC;EACtB,CAAC,EAAC,CAACA,OAAO,CAAC,CAAC;EAEZV,SAAS,CAAC,MAAM;IACdc,SAAS,CAAC,CAAC;EACb,CAAC,EAAC,EAAE,CAAC;EAEH,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,qBAAsB,UAAS,CAAC;MAChFP,OAAO,CAACC,GAAG,CAACE,QAAQ,CAAC;MACrB,IAAIA,QAAQ,CAACK,IAAI,CAACC,IAAI,KAAK,GAAG,EAAE;QAC9BV,UAAU,CAACI,QAAQ,CAACK,IAAI,CAACE,OAAO,CAAC;MACnC,CAAC,MACI;QACHV,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;QACvB;MACF;IACF,CAAC,CACD,OAAOU,GAAG,EAAE;MACVX,OAAO,CAACC,GAAG,CAACU,GAAG,CAAC;MAChB;IACF;EACF,CAAC;;EACH,oBACElB,OAAA,CAAAE,SAAA;IAAAiB,QAAA,eACEnB,OAAA,CAACF,KAAK;MAACsB,eAAe,EAAEf;IAAQ;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBACnC,CAAC;AAEP,CAAC;AAAApB,EAAA,CAjCKD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAkCT,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}